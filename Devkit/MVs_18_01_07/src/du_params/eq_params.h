/**
 *******************************************************************************
 * @file    eq_params.h
 * @brief   EQ parameters (type,f0,Q,sqrtA) for the follow EQ styles.
 *          The parameters's data format of (f0, Q, sqrtA) are Q16.0, Q6.10, and
 *          Q6.10 respectively.
 *
 * @author  Auto Generated by Parametric Equalizer Plot Software
 * @version V2.0.0
 *
 * $Created: 2016-01-08T18:13:09$:
 *
 * &copy; Shanghai Mountain View Silicon Technology Co.,Ltd. All rights reserved.
 *******************************************************************************
 */

#ifndef __EQ_PARAMS_H__
#define __EQ_PARAMS_H__

#ifdef  __cplusplus
extern "C" {
#endif//__cplusplus

#include "type.h"

#define EQ_MODE              3	// 0: Disabled EQ, 1: Hardware EQ, 2: Software EQ, 3: Hardware + Software EQ
#define EQ_STYLE_CNT         10	// Count of total EQ style
#define EQ_STYLE_SUM         EQ_STYLE_CNT
#define EQ_REG_START_ADDR    0x12
#define EQ_MAX_IIC_DATA_SIZE (2 + 2 + 2 * 4 * 10)

/**
 * @brief  Initialize EQ Style
 */
void EqStyleInit(void* SwEQ);

/**
 * @brief  Get the "Id"-th EQ style name
 * @param  Id the selected EQ style ID, its defination as follow:
 *    @arg 0: Classical
 *    @arg 1: Vocal Booster
 *    @arg 2: Flat
 *    @arg 3: Bass Booster
 *    @arg 4: Bass Reducer
 *    @arg 5: Treble Booster
 *    @arg 6: Treble Reducer
 *    @arg 7: Pop
 *    @arg 8: Rock
 *    @arg 9: Jazz
 * @return The "Id"-th EQ style name
 */
uint8_t* EqStyleNameGet(uint32_t Id);

/**
 * @brief  Select the "Id"-th EQ style
 * @param  SwEQ software EQ context pointer, set it as NULL when EQ_MODE equal to 1: hardware EQ mode
 * @param  SamplingRate sample rate
 * @param  Id the selected EQ style ID, its defination refer to EqStyleNameGet
 * @return NONE
 */
void EqStyleSelect(void* SwEQ, uint16_t SamplingRate, uint32_t Id);

/**
 * @brief EQ style parameters to IIC data
 *
 * @Id  the selected EQ style ID, @see EqStyleSelect
 * @Buf IIC data buffer, max length is EQ_MAX_IIC_DATA_SIZE
 *
 * @return IIC data length, unit in BYTE, max value is EQ_MAX_IIC_DATA_SIZE
 *
 * @note Usage example as follows
 *    //1. Get EQ mode
 *    uint16_t EqMode;//Big Endian
 *    I2cReadNByte(I2cHandle, SlaveAddr, EQ_REG_START_ADDR, &EqMode, 2);
 *
 *    //2. Disable EQ and Config EQ parameters
 *    Len = EqStyleConvert2I2CData(Id, Buf);
 *    I2cWriteNByte(I2cHandle, SlaveAddr, EQ_REG_START_ADDR, Buf, Len);
 *
 *    //3. Enable EQ in EqMode
 *    EqMode &= 0x00C0;
 *    EqMode |= *((uint16_t*)Buf);
 *    I2cWriteNByte(I2cHandle, SlaveAddr, EQ_REG_START_ADDR, &EqMode, 2);
 */
uint32_t EqStyleConvert2I2CData(uint32_t Id, uint8_t Buf[EQ_MAX_IIC_DATA_SIZE]);

#ifdef  __cplusplus
}
#endif//__cplusplus

#endif//__EQ_PARAMS_H__
